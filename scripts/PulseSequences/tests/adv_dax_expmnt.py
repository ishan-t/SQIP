from labrad.units import WithUnit
from common.okfpgaservers.pulser.pulse_sequences.plot_sequence import SequencePlotter
from sqip.scripts.PulseSequences.FastChange_DAC_voltages import fast_change_dacs 
from sqip.scripts.PulseSequences.subsequences.advanceDACs import advanceDACs
from sqip.scripts.PulseSequences.subsequences.resetDACs import resetDACs

class test_parameters(object):
    
    parameters = {
                  
              ('DACcontrol','U2target'):5,
              ('DACcontrol','enable_ramp'):True,
              ('DACcontrol','num_steps'):1,
              ('DACcontrol','time_down'):WithUnit(2, 'ms'),
              ('DACcontrol','time_up'):WithUnit(1000, 'ms'),
              ('DACcontrol','wait_time'):WithUnit(400, 'ms'),
#              ('DACcontrol','dac_pulse_length'):WithUnit(.1, 'us'),
              ('DACcontrol','dac_pulse_length'):WithUnit(1, 'us'),
              }

def main():
    import labrad
    cxn = labrad.connect()
    import time
    from treedict import TreeDict
    
    cxn.pulser.switch_auto('adv')
    cxn.pulser.switch_auto('rst')
    params = test_parameters.parameters
    d = TreeDict()
    #make a treedictionary out of the parameters
    for (collection,param), value in test_parameters.parameters.iteritems():
        d['{0}.{1}'.format(collection, param)] = value
#        if not (collection,param) in spectrum_rabi.required_parameters:
#            print 'parameter not listed among requirments', collection, param
#    for key in d.keys():
#        a = TreeDict()
#        a.update(d)
#        a.pop(key)
#        try:
#            sequence = spectrum_rabi(a)
#        except Exception:
#            pass
#        else:
#            print 'key not needed', key
    tinit = time.time()
#    cs = fast_change_dacs(d)
#    cs.programSequence(cxn.pulser)
    adv = advanceDACs(d)
    adv.programSequence(cxn.pulser)
    print 'to program', time.time() - tinit
    cxn.pulser.start_number(1)
    cxn.pulser.wait_sequence_done()
    cxn.pulser.stop_sequence()
    
    
    adv = resetDACs(d)
    adv.programSequence(cxn.pulser)
    print 'to program', time.time() - tinit
    cxn.pulser.start_number(1)
    cxn.pulser.wait_sequence_done()
    cxn.pulser.stop_sequence()    
    
    
    
    #dds = cxn.pulser.human_readable_dds()
    #ttl = cxn.pulser.human_readable_ttl()
    #print ttl == [['0.0', '00000000000000000000000000000000'], ['1e-05', '00000000000000000010000000000000'], ['1.008e-05', '00000000000000000000000000000000'], ['6e-05', '00000000000000000010000000000000'], ['6.008e-05', '00000000000000000000000000000000'], ['0.00026', '00000000000000000010000000000000'], ['0.00026008', '00000000000000000000000000000000'], ['0.00132', '00000000000000000010000000000000'], ['0.00132008', '00000000000000000000000000000000'], ['0.00142', '00000000000000000010000000000000'], ['0.00142008', '00000000000000000000000000000000'], ['0.00242', '00000000000000000010000000000000'], ['0.00242008', '00000000000000000000000000000000'], ['0.00262', '00000000000000000010000000000000'], ['0.00262008', '00000000000000000000000000000000'], ['0.00282', '00000000000000000010000000000000'], ['0.00282008', '00000000000000000000000000000000'], ['0.00332', '00000000000000000010000000000000'], ['0.00332008', '00000000000000000000000000000000'], ['0.00352', '00000000000000000010000000000000'], ['0.00352008', '00000000000000000000000000000000'], ['0.00372', '00000000000000000010000000000000'], ['0.00372008', '00000000000000000000000000000000'], ['0.00422', '00000000000000000010000000000000'], ['0.00422008', '00000000000000000000000000000000'], ['0.00442', '00000000000000000010000000000000'], ['0.00442008', '00000000000000000000000000000000'], ['0.00462', '00000000000000000010000000000000'], ['0.00462008', '00000000000000000000000000000000'], ['0.00512', '00000000000000000010000000000000'], ['0.00512008', '00000000000000000000000000000000'], ['0.00532', '00000000000000000010000000000000'], ['0.00532008', '00000000000000000000000000000000'], ['0.00552', '00000000000000000010000000000000'], ['0.00552008', '00000000000000000000000000000000'], ['0.00602', '00000000000000000010000000000000'], ['0.00602008', '00000000000000000000000000000000'], ['0.00622', '00000000000000000010000000000000'], ['0.00622008', '00000000000000000000000000000000'], ['0.00642', '00000000000000000010000000000000'], ['0.00642008', '00000000000000000000000000000000'], ['0.00692', '00000000000000000010000000000000'], ['0.00692008', '00000000000000000000000000000000'], ['0.00712', '00000000000000000010000000000000'], ['0.00712008', '00000000000000000000000000000000'], ['0.00732', '00000000000000000010000000000000'], ['0.00732008', '00000000000000000000000000000000'], ['0.00782', '00000000000000000010000000000000'], ['0.00782008', '00000000000000000000000000000000'], ['0.00802', '00000000000000000010000000000000'], ['0.00802008', '00000000000000000000000000000000'], ['0.00822', '00000000000000000010000000000000'], ['0.00822008', '00000000000000000000000000000000'], ['0.00872', '00000000000000000010000000000000'], ['0.00872008', '00000000000000000000000000000000'], ['0.00892', '00000000000000000010000000000000'], ['0.00892008', '00000000000000000000000000000000'], ['0.00912', '00000000000000000010000000000000'], ['0.00912008', '00000000000000000000000000000000'], ['0.00962', '00000000000000000010000000000000'], ['0.00962008', '00000000000000000000000000000000'], ['0.00982', '00000000000000000010000000000000'], ['0.00982008', '00000000000000000000000000000000'], ['0.01002', '00000000000000000010000000000000'], ['0.01002008', '00000000000000000000000000000000'], ['0.010026', '00000000000000000010000000000000'], ['0.01002608', '00000000000000000000000000000000'], ['0.010036', '00000100000000000010100000000000'], ['0.01003608', '00000100000000000000100000000000'], ['0.010136', '00000000000000000000100000000000'], ['0.013036', '00000000000000000010000000000000'], ['0.01303608', '00000000000000000000000000000000'], ['0.013136', '00000000000000000010000000000000'], ['0.01313608', '00000000000000000001000000000000'], ['0.01313616', '00000000000000000000000000000000'], ['0.0', '00000000000000000000000000000000']]
    #dds_result = [('global397', 89.99923704890517, -33.0004577706569), ('global397', 69.99923704890517, -63.0), ('global397', 89.99923704890517, -15.0), ('global397', 89.99923704890517, -15.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('global397', 89.99923704890517, -13.000457770656901), ('global397', 69.99923704890517, -63.0), ('global397', 69.99923704890517, -63.0), ('854DP', 79.99923704890517, -33.0004577706569), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -11.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -3.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -63.0), ('854DP', 79.99923704890517, -63.0), ('729DP_1', 149.99999984866008, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('729DP_1', 0.0, -63.0), ('radial', 109.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('radial', 89.99923704890517, -63.0), ('729DP', 219.99999997671694, -33.0004577706569), ('729DP', 0.0, -63.0), ('729DP', 0.0, -63.0), ('729DP', 0.0, -63.0), ('729DP', 0.0, -63.0), ('729DP', 219.99999997671694, -10.000228885328454), ('729DP', 219.99999997671694, -63.0), ('729DP', 219.99999997671694, -63.0), ('729DP', 224.99999986612238, -11.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 219.99999997671694, -10.000228885328454), ('729DP', 219.99999997671694, -63.0), ('729DP', 219.99999997671694, -63.0), ('729DP', 224.99999986612238, -11.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 219.99999997671694, -10.000228885328454), ('729DP', 219.99999997671694, -63.0), ('729DP', 219.99999997671694, -63.0), ('729DP', 224.99999986612238, -11.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 219.99999997671694, -10.000228885328454), ('729DP', 219.99999997671694, -63.0), ('729DP', 219.99999997671694, -63.0), ('729DP', 224.99999986612238, -11.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 224.99999986612238, -63.0), ('729DP', 219.99999997671694, -10.000228885328454), ('729DP', 219.99999997671694, -63.0), ('729DP', 219.99999997671694, -63.0), ('729DP', 214.99999990104698, -63.0), ('729DP', 214.99999990104698, -3.0), ('729DP', 214.99999990104698, -63.0), ('729DP', 214.99999990104698, -63.0), ('729DP', 214.99999990104698, -63.0), ('866DP', 79.99923704890517, -33.0004577706569), ('866DP', 79.99923704890517, -63.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -63.0), ('866DP', 79.99923704890517, -63.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -11.0), ('866DP', 79.99923704890517, -63.0)]
    #print dds == dds_result
#     for a,b in zip(dds_result, dds):
#         if not a == b:
#             print a,b
    #cxn.pulser.switch_manual('adv')
    #cxn.pulser.switch_manual('rst')
    #readout = cxn.pulser.get_readout_counts().asarray
    #print readout
    #channels = cxn.pulser.get_channels().asarray
    #sp = SequencePlotter(ttl.asarray, dds.aslist, channels)
    #sp.makePlot()
    
    
if __name__ == '__main__':
        main()